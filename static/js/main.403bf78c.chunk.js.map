{"version":3,"sources":["logo.svg","DiceRoller.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","bodyDiv","textAlign","rollDie","sides","Math","floor","random","rollDice","numberOfDice","sum","i","DiceRoller","useState","numDiceInput","setDiceInput","numSidesInput","setNumSides","desiredValueInput","setDesiredValue","result","setResult","className","TextField","id","label","onChange","event","target","value","Button","onClick","numDice","parseInt","numSides","desiredValue","x","k","num_under_x","doRolls","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qMAAe,I,6CCMTA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACtCC,QAAS,CACJC,UAAW,cAInB,SAASC,EAAQC,GACb,OAAOC,KAAKC,MAAMD,KAAKE,SAAWH,EAAQ,GAG9C,SAASI,EAASJ,EAAOK,GAErB,IADA,IAAIC,EAAM,EACDC,EAAI,EAAGA,EAAIF,EAAcE,IAC9BD,GAAOP,EAAQC,GAGnB,OAAOM,EAiBI,SAASE,IAAa,IACzBX,EAAYH,IAAZG,QADwB,EAEKY,mBAAS,IAFd,mBAEzBC,EAFyB,KAEXC,EAFW,OAGKF,mBAAS,IAHd,mBAGzBG,EAHyB,KAGVC,EAHU,OAIaJ,mBAAS,IAJtB,mBAIzBK,EAJyB,KAINC,EAJM,OAKJN,qBALI,mBAKzBO,EALyB,KAKjBC,EALiB,KAahC,OAEA,sBAAKC,UAAWrB,EAAhB,UACI,8CACA,gCACA,cAACsB,EAAA,EAAD,CAAWC,GAAG,iBAAiBC,MAAM,iBAAiBC,SAAU,SAAAC,GAAK,OAAEZ,EAAaY,EAAMC,OAAOC,UACjG,cAACN,EAAA,EAAD,CAAWC,GAAG,kBAAkBC,MAAM,kBAAkBC,SAAU,SAAAC,GAAK,OAAEV,EAAYU,EAAMC,OAAOC,UAClG,cAACN,EAAA,EAAD,CAAWC,GAAG,kBAAkBC,MAAM,gBAAgBC,SAAU,SAAAC,GAAK,OAAER,EAAgBQ,EAAMC,OAAOC,UACpG,cAACC,EAAA,EAAD,CAAQC,QAdM,WACd,IAAMC,EAAUC,SAASnB,EAAc,IACjCoB,EAAWD,SAASjB,EAAe,IACnCmB,EAAeF,SAASf,EAAmB,IACjDG,EAzBR,SAAiBjB,EAAOK,EAAc2B,GAElC,IAFgD,IAAXC,EAAU,uDAAN,IACrCC,EAAc,EACT3B,EAAI,EAAGA,EAAI0B,EAAG1B,IAAM,CACfH,EAASJ,EAAOK,GAChB2B,GACNE,IAGR,OAAQA,EAAcD,EAiBRE,CAAQL,EAAUF,EAASG,KAUrC,iBACA,8BAAI,2DAA4Df,WCnDzDoB,MANf,WACE,OACE,cAAC5B,EAAD,KCMW6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.403bf78c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {useState} from 'react';\nimport { makeStyles, Theme } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\n\n\nconst useStyles = makeStyles((theme) => ({\n   bodyDiv: {\n        textAlign: 'center',\n   }\n\n    }));\nfunction rollDie(sides){\n    return Math.floor(Math.random() * sides + 1); // returns random integer from 1 to number of sides\n}\n\nfunction rollDice(sides, numberOfDice){\n    var sum = 0;\n    for (var i = 0; i < numberOfDice; i++) {\n        sum += rollDie(sides);\n\n    }\n    return sum;\n}\n\nfunction doRolls(sides, numberOfDice, x, k = 10000){\n    var num_under_x = 0\n    for (var i = 0; i < k; i ++) {\n        var sum = rollDice(sides, numberOfDice);\n        if (sum < x) {\n            num_under_x++\n        } \n    }\n    return (num_under_x / k);\n    \n}\n\n\n\nexport default function DiceRoller(){\n    const { bodyDiv } = useStyles();\n    const [numDiceInput, setDiceInput] = useState('');\n    const [numSidesInput, setNumSides] = useState('');\n    const [desiredValueInput, setDesiredValue] = useState('');\n    const [result, setResult] = useState();\n\n    const handleRun = () => {\n        const numDice = parseInt(numDiceInput, 10);\n        const numSides = parseInt(numSidesInput, 10);\n        const desiredValue = parseInt(desiredValueInput, 10);\n        setResult(doRolls(numSides, numDice, desiredValue));\n    }\n    return (\n    \n    <div className={bodyDiv}>\n        <h1>Dice Roller!</h1>\n        <div>\n        <TextField id=\"standard-basic\" label=\"number of dice\" onChange={event=>setDiceInput(event.target.value)} />\n        <TextField id=\"standard-basic1\" label=\"number of sides\" onChange={event=>setNumSides(event.target.value)}/>\n        <TextField id=\"standard-basic2\" label=\"desired value\" onChange={event=>setDesiredValue(event.target.value)}/>\n        <Button onClick={handleRun}>Run</Button>\n        <p>{\"Probability that you roll less than your desired value: \"}{result}</p>\n        </div>\n\n\n\n    </div>\n    )\n\n}","import logo from './logo.svg';\nimport './App.css';\nimport DiceRoller from './DiceRoller';\n\nfunction App() {\n  return (\n    <DiceRoller />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}